

# This file was *autogenerated* from the file compute_dim.sage
from sage.all_cmdline import *   # import sage library

_sage_const_1 = Integer(1); _sage_const_2 = Integer(2); _sage_const_0 = Integer(0); _sage_const_3 = Integer(3); _sage_const_4 = Integer(4); _sage_const_12 = Integer(12); _sage_const_10 = Integer(10); _sage_const_13 = Integer(13); _sage_const_25 = Integer(25); _sage_const_37 = Integer(37); _sage_const_50 = Integer(50); _sage_const_100 = Integer(100); _sage_const_51 = Integer(51); _sage_const_200 = Integer(200); _sage_const_20 = Integer(20); _sage_const_8 = Integer(8)
import sys

ARG = sys.argv[_sage_const_1 ]
ARG_PARAM = sys.argv[_sage_const_2 ]




def vp(n, p):
    cnt = _sage_const_0 
    while n % p == _sage_const_0 :
        cnt += _sage_const_1 
        n //= p
    return cnt



#######################################3
def psi_local(p,r):
    assert r >= _sage_const_1 
    return (p+_sage_const_1 )*p**(r-_sage_const_1 )


def psi(n):
    ret = _sage_const_1 
    for p,r in factor(n):
        ret *= psi_local(p,r)
    return ret


def beta_psi_f_local(p,r,alpha):
    assert r >= _sage_const_1 
    if alpha == _sage_const_0 :
        if r == _sage_const_1 :
            return p-_sage_const_1 
        elif r==_sage_const_2 :
            return p**_sage_const_2 -p-_sage_const_1 
        else:
            return (p**_sage_const_3 -p**_sage_const_2 -p+_sage_const_1 ) * p**(r-_sage_const_3 )
    else:
        if r==_sage_const_1 :
            return p-_sage_const_2 
        else:
            return (p**_sage_const_2 -_sage_const_2 *p+_sage_const_1 ) * p**(r-_sage_const_2 )
    

def beta_psi_f(n, f):
    ret = _sage_const_1 
    for p,r in factor(n):
        ret *= beta_psi_f_local(p,r,vp(f,p))
    return ret


################################################

def beta_sigma_f_local(p,r,alpha):
    assert r>=_sage_const_1 
    if alpha == _sage_const_0 :
        if r % _sage_const_2  == _sage_const_1 :
            return _sage_const_0 
        elif r == _sage_const_2 :
            return p-_sage_const_2 
        else:
            return (p**_sage_const_2 -_sage_const_2 *p+_sage_const_1 ) * p**(r//_sage_const_2 -_sage_const_2 )
    elif r == _sage_const_1 :
        if alpha == _sage_const_1 :
            return (p-_sage_const_3 )/_sage_const_2 
        else:
            return p-_sage_const_2 
    else:
        if r >= alpha+_sage_const_1  and (r+alpha)%_sage_const_2 ==_sage_const_1 :
            return _sage_const_0 
        elif r >= alpha+_sage_const_2  and (r+alpha)%_sage_const_2 ==_sage_const_0 :
            return (_sage_const_1 /_sage_const_2 ) * (p**_sage_const_2 -_sage_const_2 *p+_sage_const_1 ) * p**((r+alpha)/_sage_const_2 -_sage_const_2 ) 
        elif r == alpha:
            return (_sage_const_1 /_sage_const_2 ) * (p**_sage_const_2 -_sage_const_3 *p+_sage_const_2 ) * p**(r-_sage_const_2 )
        else:
            return (p**_sage_const_2 -_sage_const_2 *p+_sage_const_1 ) * p**(r-_sage_const_2 ) 


def beta_sigma_f(n,f):
    ret = _sage_const_1 
    for p,r in factor(n):
        ret *= beta_sigma_f_local(p,r,vp(f,p))
    return ret

#######################################################

def get_chi_p_alpha(f_fact, chi, p, x):
    rems = [(int(x) if q == p else _sage_const_1 ) for (q,alpha) in f_fact]
    mods = [p**alpha for (p,alpha) in f_fact]
    assert rems.count(_sage_const_1 ) == len(rems) - _sage_const_1 
    x_hat = CRT(rems, mods)
    chi_prim = chi.primitive_character()
    return chi_prim(x_hat)




def rho_local(p,r,alpha,chi,f_fact):
    assert r >= alpha
    assert r >= _sage_const_1 

    if p == _sage_const_2 :
        return _sage_const_0 
    elif p == _sage_const_3 :
        if r == _sage_const_1 :
            return _sage_const_1 
        else:
            return _sage_const_0 
    elif kronecker(-_sage_const_3 ,p) == -_sage_const_1 :
        return _sage_const_0 
    else:
        u = mod(-_sage_const_3 ,p**r).sqrt()
        chi_x = get_chi_p_alpha(f_fact, chi, p, (-_sage_const_1 +u)/_sage_const_2 )
        assert chi_x**_sage_const_3  == _sage_const_1 
        if chi_x == _sage_const_1 :
            return _sage_const_2 
        else:
            return -_sage_const_1 
    


def rho(n,chi,f_fact):
    vpf = {p:r for (p,r) in f_fact}
    ret = _sage_const_1 
    for p,r in factor(n):
        ret *= rho_local(p,r,vpf[p],chi,f_fact)
    return ret


def beta_rho_f_local(p,r,alpha):
    assert r >= _sage_const_1 
    if r == _sage_const_1 :
        if p == _sage_const_3  and alpha == _sage_const_0 :
            return -_sage_const_1 
        elif p != _sage_const_3  and alpha >= _sage_const_1 :
            return -_sage_const_1 
        elif p != _sage_const_2  and p != _sage_const_3  and alpha == _sage_const_0  and kronecker(-_sage_const_3 ,p)==_sage_const_1 :
            return _sage_const_0 
        else:
            return -_sage_const_2 
    elif r == _sage_const_2 :
        if p == _sage_const_3  and alpha == _sage_const_0 :
            return -_sage_const_1 
        elif p != _sage_const_3  and alpha >= _sage_const_1 :
            return _sage_const_0 
        elif p != _sage_const_2  and p != _sage_const_3  and alpha == _sage_const_0  and kronecker(-_sage_const_3 ,p)==_sage_const_1 :
            return -_sage_const_1 
        else:
            return _sage_const_1 
    else:
        if p == _sage_const_3  and r == _sage_const_3  and alpha == _sage_const_0 :
            return _sage_const_1 
        else:
            return _sage_const_0 



def beta_rho_f(n,f):
    ret = _sage_const_1 
    for p,r in factor(n):
        ret *= beta_rho_f_local(p,r,vp(f,p))
    return ret



##################################################3



def rhopm_local(p,r,alpha,chi,f_fact):
    assert r >= alpha
    assert r >= _sage_const_1 

    if p == _sage_const_2 :
        if r == _sage_const_1 :
            return _sage_const_1 
        else:
            return _sage_const_0 
    elif kronecker(-_sage_const_1 ,p) == -_sage_const_1 :
        return _sage_const_0 
    else:
        upm = mod(-_sage_const_1 ,p**r).sqrt()
        chi_x = get_chi_p_alpha(f_fact, chi, p, upm)
        assert chi_x**_sage_const_4  == _sage_const_1 
        if chi_x == _sage_const_1 :
            return _sage_const_2 
        elif chi_x == -_sage_const_1 :
            return -_sage_const_2 
        else:
            return _sage_const_0 
        
    


def rhopm(n,chi,f_fact):
    vpf = {p:r for (p,r) in f_fact}
    ret = _sage_const_1 
    for p,r in factor(n):
        ret *= rhopm_local(p,r,vpf[p],chi,f_fact)
    return ret


def beta_rhopm_f_local(p,r,alpha):
    assert r >= _sage_const_1 
    if r == _sage_const_1 :
        if p == _sage_const_2  and alpha == _sage_const_0 :
            return -_sage_const_1 
        elif p != _sage_const_2  and alpha >= _sage_const_1 :
            return -_sage_const_1 
        elif p != _sage_const_2  and alpha == _sage_const_0  and kronecker(-_sage_const_1 ,p)==_sage_const_1 :
            return _sage_const_0 
        else:
            return -_sage_const_2 
    elif r == _sage_const_2 :
        if p == _sage_const_2  and alpha == _sage_const_0 :
            return -_sage_const_1 
        elif p != _sage_const_2  and alpha >= _sage_const_1 :
            return _sage_const_0 
        elif p != _sage_const_2  and alpha == _sage_const_0  and kronecker(-_sage_const_1 ,p)==_sage_const_1 :
            return -_sage_const_1 
        else:
            return _sage_const_1 
    else:
        if p == _sage_const_2  and r == _sage_const_3  and alpha == _sage_const_0 :
            return _sage_const_1 
        else:
            return _sage_const_0 



def beta_rhopm_f(n,f):
    ret = _sage_const_1 
    for p,r in factor(n):
        ret *= beta_rhopm_f_local(p,r,vp(f,p))
    return ret



###########################################################

def c3(k):
    if k % _sage_const_3  == _sage_const_0 :
        return -_sage_const_1 /_sage_const_3 
    elif k % _sage_const_3  == _sage_const_1 :
        return _sage_const_0 
    else:
        return _sage_const_1 /_sage_const_3 

def c4(k):
    if k % _sage_const_4  == _sage_const_0 :
        return -_sage_const_1 /_sage_const_4 
    elif k % _sage_const_4  == _sage_const_1 :
        return _sage_const_0 
    elif k % _sage_const_4  == _sage_const_2 :
        return _sage_const_1 /_sage_const_4 
    else:
        return _sage_const_1 /_sage_const_2 

def c0(k,f):
    if k == _sage_const_2  and f == _sage_const_1 :
        return _sage_const_1 
    else:
        return _sage_const_0 

def omega(n):
    return len(factor(n))

def beta(n):
    ret = _sage_const_1 
    for p,r in factor(n):
        if r == _sage_const_1 :
            ret *= -_sage_const_2 
        elif r == _sage_const_2 :
            ret *= _sage_const_1 
        else:
            ret *= _sage_const_0 
    return ret 
    

###############################################



def get_dim_newspace(N,k,chi):
    f = chi.conductor()
    f_fact = factor(f)
    ret = _sage_const_0 
    ret += (k-_sage_const_1 )/_sage_const_12  * psi(f) * beta_psi_f(N//f, f)
    ret += -_sage_const_1  * c3(k) * rho(f, chi, f_fact) * beta_rho_f(N//f, f)
    ret += -_sage_const_1  * c4(k) * rhopm(f, chi, f_fact) * beta_rhopm_f(N//f, f)
    ret += (-_sage_const_1 /_sage_const_2 ) * _sage_const_2 **omega(f) * beta_sigma_f(N//f, f) 
    ret += c0(k,f) * moebius(N//f)
    return ret


################################################################


def test_small_dim(N_ub):
    for N in range(_sage_const_1 ,N_ub):
        for chi_idx, chi in enumerate(DirichletGroup(N)):
            dims = []
            for k in range(_sage_const_2 ,_sage_const_10 ):
                if chi(-_sage_const_1 ) == (-_sage_const_1 )**k:
                    expdim = get_dim_newspace(N,k,chi)
                    assert expdim == dimension_new_cusp_forms(chi,k)
                    dims.append(expdim)
            sgn_ = '+' if chi(-_sage_const_1 ) == _sage_const_1  else '-'
            print(f'({N},{chi_idx}){sgn_}: {dims}')



def test_k13(N_ub):
    for N in range(_sage_const_1 ,N_ub):
        for k in [_sage_const_13 ,_sage_const_25 ,_sage_const_37 ]:
            dims = {d:[] for d in divisors(N)}
            for chi_idx, chi in enumerate(DirichletGroup(N)):
                if chi(-_sage_const_1 ) == (-_sage_const_1 )**k:
                    expdim = get_dim_newspace(N,k,chi)
                    assert expdim == dimension_new_cusp_forms(chi,k)
                    dims[chi.conductor()].append(expdim)
            print(f'({N},{k}) - ' + ''.join(f'{d}: {dims[d]},  ' for d in divisors(N) if len(dims[d])>_sage_const_0 ))




def compute_dims_smallNk(N_ub):
    for N in range(_sage_const_1 , N_ub):
        for chi_idx, chi in enumerate(DirichletGroup(N)):
            ff = chi.conductor()
            if ff % _sage_const_2  == _sage_const_0  and N//ff % _sage_const_4  == _sage_const_2 :
                continue
            if _sage_const_1  <= N <= _sage_const_50 : kUB = _sage_const_100 
            elif _sage_const_51  <= N <= _sage_const_200 : kUB = _sage_const_20 
            else: kUB = _sage_const_8 
            for k in range(_sage_const_2 ,kUB):
                if chi(-_sage_const_1 ) == (-_sage_const_1 )**k:
                    expdim = get_dim_newspace(N,k,chi)
                    if expdim <= _sage_const_1 :
                        print(f'({N},{k},{chi.conrey_number()}): {expdim}')






def compute_dims(filenm):
    with open(filenm) as fl:
        ALL_N_kLB = eval(fl.read())
    for N, kLB in ALL_N_kLB:
        for chi_idx, chi in enumerate(DirichletGroup(N)):
            ff = chi.conductor()
            if ff % _sage_const_2  == _sage_const_0  and N//ff % _sage_const_4  == _sage_const_2 :
                continue
            for k in range(_sage_const_2 , kLB):
                if chi(-_sage_const_1 ) == (-_sage_const_1 )**k:
                    expdim = get_dim_newspace(N,k,chi)
                    if expdim <= _sage_const_1 : 
                        print(f'({N},{k},{chi.conrey_number()}): {expdim}')




if ARG == 'test':
    test_small_dim(int(ARG_PARAM))
elif ARG == 'test_k13':
    test_k13(int(ARG_PARAM))
elif ARG == 'small_N_k':
    compute_dims_smallNk(int(ARG_PARAM))
elif ARG == 'N_kLB':
    compute_dims(ARG_PARAM)
else:
    assert False



